{
  "rules": [
    {
      "scope": "global",
      "prompt": "Project: Text→SOQL→dbt→Snowflake→Slack MVP (aka Dataduck/Whizzy). Users ask business questions; the system converts to SOQL, pulls from Salesforce, lands to Snowflake, builds dbt models/marts, and posts daily Coffee Briefings to Slack. Keep everything minimal, demoable, and reliable over 2 nights."
    },
    {
      "scope": "global",
      "prompt": "Architecture roles: Planner (decide tables/metrics + draft SOQL/SQL), Builder (runs MCP tools), Runner (executes Snowflake/dbt), Narrator (turns rows into brief exec-ready bullets)."
    },
    {
      "scope": "global",
      "prompt": "MCP tools the codebase will expose: sf.query(soql, limit?), snowflake.exec(sql), dbt.build(selector?). Always prefer querying marts over raw when answering questions."
    },
    {
      "scope": "global",
      "prompt": "Data model target (dbt/Snowflake): schemas RAW (landed from SF) and ANALYTICS (dbt). Example marts: fct_pipeline_velocity (time in stage, total_days_in_pipeline), fct_attribution_opportunity (first/last-touch). Use dbt_utils + dbt_expectations."
    },
    {
      "scope": "global",
      "prompt": "Coding conventions: Python 3.11, uv if available else pip/venv; .env via python-dotenv; simple-salesforce for SOQL; snowflake-connector-python; FastAPI for a tiny /ask endpoint later; Slack SDK for posts. Keep functions small, add docstrings, log errors with helpful context."
    },
    {
      "scope": "global",
      "prompt": "Quality & guardrails: Add basic try/except with clear error messages; validate SOQL shape (SELECT ... FROM ...); cap row counts. Prefer config/env over hard-coded secrets. Use XSMALL Snowflake warehouse with auto-suspend."
    },
    {
      "scope": "global",
      "prompt": "Acceptance per feature: (1) sf.query works from Cursor; (2) Snowflake connection can create RAW tables and insert rows; (3) dbt build succeeds for staging+ and marts; (4) Slack Coffee Briefing posts one message with summary + top rows."
    },
    {
      "scope": "global",
      "prompt": "Style: short, readable code; minimal deps; copy-paste runnable snippets. Produce TODOs when making stubs. Prefer loose version pins (caret) unless asked to lock."
    }
  ]
}

